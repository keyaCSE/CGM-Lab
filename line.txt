#include <GL/gl.h>
#include <GL/glut.h>
#include<iostream>
using namespace std;
void display(void)
{
/* clear all pixels */
    glClear (GL_COLOR_BUFFER_BIT);
/* draw white polygon (rectangle) with corners at
* (0.25, 0.25, 0.0) and (0.75, 0.75, 0.0)
*/

    glColor3f (1.0, 1.0, 1.0);
    glPointSize(10);

    glBegin(GL_POINTS);

    int x1=3, y1=2,x2=8,y2=5;
    int dx,dy;
    double m;
    dx=x2-x1;
    dy=y2-y1;
    m=dy/(double)dx;
    glVertex2f(x1,y1);
    double y=y1;
    while(x1<x2){

        x1++;
        y= m+ y;
        //cout<<"Y= "<<endl;
        glVertex2f(x1,(int)y);
       // cout<<x1<<" "<<y1<<endl;

    }
glEnd();


glFlush ();
}
void init (void)
{
/* select clearing (background) color */
    glClearColor(0.0, 0.0, 0.0, 1.0);
    /* initialize viewing values */
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    glOrtho(-10.0, 10.0, -10.0, 10.0, -10.0, 10.0);
}
/*
* Declare initial window size, position, and display mode
* (single buffer and RGBA). Open window with "hello"
* in its title bar. Call initialization routines.
* Register callback function to display graphics.
* Enter main loop and process events.
*/
int main(int argc, char** argv)
{
    glutInit(&argc, argv);
    glutInitDisplayMode (GLUT_SINGLE | GLUT_RGB);
    glutInitWindowSize (600, 600);
    glutInitWindowPosition (100, 100);
    glutCreateWindow ("Demo");
    init ();
    glutDisplayFunc(display);
    glutMainLoop();
    return 0;
}
