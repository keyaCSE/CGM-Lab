#include<bits/stdc++.h>
#include <GL/gl.h>
#include <GL/glut.h>
using namespace std;
void display(void)
{
/* clear all pixels */
    glClear (GL_COLOR_BUFFER_BIT);
/* draw white polygon (rectangle) with corners at
* (0.25, 0.25, 0.0) and (0.75, 0.75, 0.0)
*/
    glColor3f (1.0, 1.0, 1.0);
        glPointSize(5);

    glBegin(GL_POINTS);
    //glVertex3f(5,5,0.0f);
    glColor3f(1.0f,0.0f,0.0f);

    int x,y,r,d;
    r=8;
    x=0;
    y=r;
    d = 1-r;
    while(x<=y)
    {
        glVertex3f(x+5,y+5,0.0f);
        glVertex3f(-x+5,y+5,0.0f);
        glVertex3f(-x+5,-y+5,0.0f);
        glVertex3f(x+5,-y+5,0.0f);
        glVertex3f(y+5,x+5,0.0f);
        glVertex3f(-y+5,x+5,0.0f);
        glVertex3f(-y+5,-x+5,0.0f);
        glVertex3f(y+5,-x+5,0.0f);
        if(d < 0)
        {
            d = d + 2 * x + 3;
        }
        else{
            d = d + 2*(x - y) + 5;
            y--;
        }
        x++;
    }
    glEnd();
/* don't wait!
* start processing buffered OpenGL routines
*/
glFlush ();
}
void init (void)
{
/* select clearing (background) color */
    glClearColor (0.0, 0.0, 0.0, 0.0);
    /* initialize viewing values */
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    glOrtho(-20, 20, -20, 20, -10.0, 10.0);
}
/*
* Declare initial window size, position, and display mode
* (single buffer and RGBA). Open window with "hello"
* in its title bar. Call initialization routines.
* Register callback function to display graphics.
* Enter main loop and process events.
*/
int main(int argc, char** argv)
{
    glutInit(&argc, argv);
    glutInitDisplayMode (GLUT_SINGLE | GLUT_RGB);
    glutInitWindowSize (600, 600);
    glutInitWindowPosition (100, 100);
    glutCreateWindow ("Demo");
    init ();
    glutDisplayFunc(display);
    glutMainLoop();
    return 0;
}
